name: Deploy public image

on:
  workflow_call:
    inputs:
      metadata:
        required: false
        type: string
        default: "[ orphan ]"
      host:
        required: false
        type: string
        default: 'test.connectorsapp.com'
      host-path:
        required: false
        type: string
        default: '/'
      port:
        required: false
        type: string
        default: '8080'
      image:
        required: false
        type: string
        default: ''
      image-version:
        required: false
        type: string
        default: ''
      image-scope:
        required: false
        type: string
        default: 'private'
      build:
        required: false
        type: boolean
        default: false
      registry:
        required: false
        type: string
        default: 'docker_hub'
      notification-off:
        required: false
        type: boolean
        default: false
    secrets:
      cloud-token:
        required: false
      github-token:
        required: false
      dockerhub_username:
        required: false
      dockerhub_token:
        required: false
      db_token:
        required: false
      image-username:
        required: false
      image-pwd:
        required: false

jobs:
  deploy-civo-with-public-image:
    runs-on: ubuntu-22.04
    if: inputs.image != ''
    steps:
      - name: deploy civo provider
        run: |
          echo ${{ inputs.cloud-provider }}

      - uses: actions/checkout@v4

      - name: list files
        run: |
          echo "----------in deploy-local-with-public-image -----------"
          ls -la
          echo "---------------------"

      - name: clone git and apply to snow cluster
        run: |
          echo "----------------- prepare update cloning -----------------"
          git config --global user.email yabin.monroy.1@gmail.com && git config --global user.name yabinboxes
          git clone https://oath2:${{ secrets.github-token }}@github.com/snow-monkeys-org/helm-template-public-img-nginx.git
#          encoded_string=$(base64 application.yaml)
#          echo "encoded_string=$encoded_string" >> $GITHUB_ENV
#          echo "base64_string=${{ env.encoded_string }}" >> $GITHUB_OUTPUT

      - name: sent to POST response
        run: |
          cd helm-template-public-img-nginx
          echo "---------- list -----------"
          ls
          echo "---------------------"
          FILE_BASE64=$(base64 -w 0 application.yaml)
          echo $FILE_BASE64
          echo "---------------------"
          curl -X POST \
          -H "Content-Type: application/json" \
          -d "{\"name\": \"${{ github.event.repository.name }}-argo-app\", \"base64FileStr\": \"$FILE_BASE64\" }" \
          https://connectors.ngrok.app/kubectl/apply

#- name: 1. clone and exec helm repo for the working project
#id: validate-repo
#env:
#  GH_TOKEN: ${{ secrets.github-token }}
#run: |
#  echo "----------in action.yml in deploy-public-img -----------"
#  ls
#  echo "---------------------"
#  echo "EXIST_REPO=$(gh repo view snow-monkeys-org/app-${{ github.event.repository.name }}-helm-civo | tr '\n' ' ')" >> $GITHUB_OUTPUT

#- name: 2. connect to civo kubernetes
#if: ${{ ! steps.validate-repo.outputs.EXIST_REPO }}
#run: |
#  curl -sL https://civo.com/get | sh
#  civo apikey add my-cluster ${{ secrets.cloud-token }}
#  civo kubernetes config k8s_demo_1 --save
#  kubectl cluster-info

#     condition if repository doesnt exist
#- name: 3. with public image - repo doesnt exist for working project - clone and exec helm repo for the working project
#if: ${{ ! steps.validate-repo.outputs.EXIST_REPO }}
#env:
#  GH_TOKEN: ${{ secrets.github-token }}
#run: |
#  echo "doesnt exist snow-monkeys-org/app-${{ github.event.repository.name }}-helm-civo"
#  git config --global user.email yabin.monroy.1@gmail.com && git config --global user.name yabinboxes
#  echo "cloning config repo helm-template-public-img-traefik"
#  git clone https://oath2:${{ secrets.github-token }}@github.com/snow-monkeys-org/helm-template-public-img-traefik.git
#  echo "creating app-${{ github.event.repository.name }}-helm-civo"
#  gh repo create snow-monkeys-org/app-${{ github.event.repository.name }}-helm-civo --private
#  mkdir app-${{ github.event.repository.name }}-helm-civo
#  echo "---------------------"
#  ls
#  echo "---------------------"
#  cd helm-template-public-img-traefik
#  cp -R application.yaml repo-creds.yaml ../app-${{ github.event.repository.name }}-helm-civo/
#  cp -R myapp-helm ../app-${{ github.event.repository.name }}-helm-civo/myapp-helm/
#  cd ..
#  cd app-${{ github.event.repository.name }}-helm-civo
#  echo "---------------------"
#  ls
#  echo "---------------------"
#  echo "---------insert into values.yaml------------"
#  sed -i "s,name:.*,name:\ app-${{ github.event.repository.name }}-helm-civo," myapp-helm/values.yaml
#  sed -i "s,repository:.*,repository:\ ${{ inputs.image }}," myapp-helm/values.yaml
#  sed -i "/^service:/,/port:/{/^\([[:space:]]*port: \).*/s//\1${{ inputs.port }}/}" myapp-helm/values.yaml
#  sed -i "s,tag:.*,tag:\ ${{ inputs.image-version }}," myapp-helm/values.yaml
#  sed -i "s,host:.*,host:\ ${{ inputs.host }}," myapp-helm/values.yaml
#  sed -i "s,path:.*,path:\ ${{ inputs.host-path }}," myapp-helm/values.yaml
#  cat myapp-helm/values.yaml
#  echo "---------------------"
#  echo "---------insert into application.yaml------------"
#  sed -i "s,name:.*,name:\ app-${{ github.event.repository.name }}-helm-civo," application.yaml
#  sed -i "/^httpGet:/,/path:/{/^\([[:space:]]*path: \).*/s//\1health/}" application.yaml
#  sed -i "/^ingress:/,/enabled:/{/^\([[:space:]]*enabled: \).*/s//\1true/}" application.yaml
#  sed -i "s,monkeyrepourl,https://github.com/snow-monkeys-org/app-${{ github.event.repository.name }}-helm-civo.git," application.yaml
#  cat application.yaml
#  echo "---------------------"
#  echo "--------insert into creds-------------"
#  sed -i "s,name:.*,name:\ app-${{ github.event.repository.name }}-helm-civo," repo-creds.yaml
#  sed -i "s,username:.*,username:\ yabinboxes," repo-creds.yaml
#  sed -i "s,monkeyrepourl,https://github.com/snow-monkeys-org/app-${{ github.event.repository.name }}-helm-civo.git," repo-creds.yaml
#  sed -i "s,monkeypassword,${{ secrets.github-token }}," repo-creds.yaml
#  cat repo-creds.yaml
#  echo "---------------------"
#  git config --global user.email yabin.monroy.1@gmail.com && git config --global user.name yabinboxes
#  git config --global init.defaultBranch main
#  git init
#  git add .
#  git commit -m "init new helm repo"
#  git branch -M main
#  git remote add origin https://yabinboxes:${{ secrets.github-token }}@github.com/snow-monkeys-org/app-${{ github.event.repository.name }}-helm-civo.git
#  git push -u origin main
#  echo "---------------------"
#  ls
#  echo "---------------------"

#- name: 4. with public image - update repo
#if: ${{ steps.validate-repo.outputs.EXIST_REPO }}
#run: |
#  echo "----------------- prepare update cloning -----------------"
#  mkdir cloning${{ github.sha }}
#  cd cloning${{ github.sha }}
#  echo "promoting into dev environment"
#  git config --global user.email yabin.monroy.1@gmail.com && git config --global user.name yabinboxes
#  git clone https://oath2:${{ secrets.github-token }}@github.com/snow-monkeys-org/app-${{ github.event.repository.name }}-helm-civo.git
#  cd app-${{ github.event.repository.name }}-helm-civo
#  echo "---------------------"
#  ls
#  echo "---------------------"
#  echo "---------insert into values.yaml------------"
#  sed -i "s,repository:.*,repository:\ ${{ inputs.image }}," myapp-helm/values.yaml
#  sed -i "/^service:/,/port:/{/^\([[:space:]]*port: \).*/s//\1${{ inputs.port }}/}" myapp-helm/values.yaml
#  sed -i "s,tag:.*,tag:\ ${{ inputs.image-version }}," myapp-helm/values.yaml
#  sed -i "s,host:.*,host:\ ${{ inputs.host }}," myapp-helm/values.yaml
#  sed -i "s,path:.*,path:\ ${{ inputs.host-path }}," myapp-helm/values.yaml
#  cat myapp-helm/values.yaml
#  echo "---------------------"
#  echo "checkout main branch"
#  git checkout main
#  echo "updating image tag in values file"
#  git add . && git commit -m "update image tag"
#  git push

#- name: 5. apply local kubernetes
#run: |
#  echo "------ local apply to kubernetes ------"
#  BASE64_CONTENT=$(base64 application.yaml)
#  echo $BASE64_CONTENT
#  curl -X POST \
#  -H "Content-Type: application/json" \
#  -d "{\"name\": \"${{ github.event.repository.name }}-argo-app\", \"base64FileStr\": \"$BASE64_CONTENT\" }" \
#  https://connectors.ngrok.app/kubectl/apply